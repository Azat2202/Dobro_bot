from aiogram import types
from aiogram.dispatcher import filters

from database.UsersDatabaseManager import UsersDatabaseManager
from loader import dp
from utility import karma_degrees


@dp.message_handler(filters.Text(startswith="–¥–æ–±—Ä—è—à", ignore_case=True))
@dp.message_handler(filters.Text(startswith="—É–º–Ω–∏–∫", ignore_case=True))
@dp.message_handler(filters.Text(startswith="—É–º–Ω–∏—Ü–∞", ignore_case=True))
@dp.message_handler(filters.Text(startswith="–º–æ–ª–æ–¥–µ—Ü", ignore_case=True))
@dp.message_handler(filters.Text(startswith="–ø–ª—é—Å", ignore_case=True))
@dp.message_handler(filters.Text(startswith="—Å–ø–∞—Å–∏–±–æ", ignore_case=True))
async def plus_karma(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—Ä–º—É –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if message.reply_to_message.from_user.id == message.from_user.id:
        await message.reply("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–µ–±–µ")
        return
    with UsersDatabaseManager() as db_worker:
        karma = db_worker.inc_karma(
            message.reply_to_message.from_user.id, message.chat.id
        )
        if db_worker.is_parent(
            message.from_user.id, message.reply_to_message.from_user.id, message.chat.id
        ):
            karma = db_worker.inc_karma(
                message.reply_to_message.from_user.id, message.chat.id
            )
            await message.reply(f"–ö–∞—Ä–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ –¥–≤–æ–π–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ! ({karma})")
        else:
            await message.reply(f"–ö–∞—Ä–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞! ({karma})")
    if karma in karma_degrees.keys():
        await message.reply(
            "üéâüéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üéâüéâ\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã <b>{karma_degrees.get(karma)}!</b>\n"
            f"–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä–º—ã: {karma}"
        )


@dp.message_handler(filters.Text(equals="–º–∏–Ω—É—Å", ignore_case=True))
@dp.message_handler(filters.Text(equals="—Ç–æ–∫—Å", ignore_case=True))
async def minus_karma(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–£–º–µ–Ω—å—à–∏—Ç—å –∫–∞—Ä–º—É –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    if message.reply_to_message.from_user.id == message.from_user.id:
        await message.reply("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–µ–±–µ")
        return
    with UsersDatabaseManager() as db_worker:
        karma = db_worker.dec_karma(
            message.reply_to_message.from_user.id, message.chat.id
        )
        if db_worker.is_parent(
            message.from_user.id, message.reply_to_message.from_user.id, message.chat.id
        ):
            karma = db_worker.dec_karma(
                message.reply_to_message.from_user.id, message.chat.id
            )
            await message.reply(f"–ö–∞—Ä–º–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –≤ –¥–≤–æ–π–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ! ({karma})")
        else:
            await message.reply(f"–ö–∞—Ä–º–∞ —É–º–µ–Ω—å—à–µ–Ω–∞! ({karma})")
    if karma in karma_degrees.keys():
        await message.reply(
            "ü§¨ü§¨–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –∫–∞—Ä–º—É!ü§¨ü§¨\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã <b>{karma_degrees.get(karma)}!</b>\n"
            f"–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä–º—ã: {karma}"
        )
