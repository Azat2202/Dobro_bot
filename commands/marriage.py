from datetime import datetime

from aiogram import types
from aiogram.dispatcher import filters
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import emoji

from commands.inlineKeyboards import form_inline_kb
from database.UsersDatabaseManager import UsersDatabaseManager
from database.exceptions import *
from loader import dp
from utility import format_name, beautiful_time_repr


@dp.message_handler(commands=["marry"])
async def new_marriage(message: types.Message):
    with UsersDatabaseManager() as db_worker:
        if message.reply_to_message:
            if db_worker.get_partner(message.from_user.id, message.chat.id):
                await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!")
                return
            elif db_worker.get_partner(
                message.reply_to_message.from_user.id, message.chat.id
            ):
                await message.reply("–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!")
                return
            elif message.reply_to_message.from_user.id == message.from_user.id:
                await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å–∞–º–∏–º —Å —Å–æ–±–æ–π!")
                return
            sent_msg = await message.reply(
                emoji.emojize(
                    f'<a href="tg://user?id={message.reply_to_message.from_user.id}">{format_name(message.from_user.first_name, message.from_user.last_name)}</a>, –≤—ã '
                    f'—Å–æ–≥–ª–∞—Å–Ω—ã –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å <a href="tg://user?id={message.reply_to_message.from_user.id}">'
                    f"{format_name(message.reply_to_message.from_user.first_name, message.reply_to_message.from_user.last_name)}</a>?\n "
                    f"–î–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞–∫–∞ —Ç–∞–∫ –∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–≤–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—è\n"
                    f"–°–æ–≥–ª–∞—Å–∏–µ: :cross_mark:\n"
                    f"–ü–µ—Ä–≤—ã–π —Å–≤–∏–¥–µ—Ç–µ–ª—å: :cross_mark:\n"
                    f"–í—Ç–æ—Ä–æ–π —Å–≤–∏–¥–µ—Ç–µ–ª—å: :cross_mark:"
                ),
                reply_markup=form_inline_kb(),
            )
            db_worker.registrate_new_marriage(
                message.from_user.id,
                message.from_user.first_name,
                message.from_user.last_name,
                message.reply_to_message.from_user.id,
                message.reply_to_message.from_user.first_name,
                message.reply_to_message.from_user.last_name,
                message.chat.id,
                sent_msg.message_id,
            )
        else:
            await message.reply(
                "–ß—Ç–æ–±—ã –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )


@dp.message_handler(commands="marriages")
async def marriages_repr(message: types.Message):
    with UsersDatabaseManager() as db_worker:
        data = db_worker.get_marriages(message.chat.id)
        out = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–∞–∫–∞–º:\n"
        num = 0
        for line in data:
            (
                user1,
                user1_name,
                user2,
                user2_name,
                witness1_name,
                witness2_name,
                marriage_date,
            ) = line
            num += 1
            time_obj = datetime.now() - datetime.strptime(
                marriage_date, "%y-%m-%d %H:%M:%S"
            )
            out += f"{num}. <b>{user1_name}</b> –∏ <b>{user2_name}</b> - {beautiful_time_repr(time_obj)}\n"
        out += f"\n–í—Å–µ–≥–æ {num} –±—Ä–∞–∫–æ–≤"
        if num == 0:
            out = "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞!"
        await message.reply(out)


@dp.message_handler(commands="my_marriage")
async def my_marriages_repr(message: types.Message):
    with UsersDatabaseManager() as db_worker:
        data = db_worker.get_my_marriage(message.from_user.id, message.chat.id)
        if not data:
            await message.reply("–í—ã –µ—â–µ –Ω–µ –≤ –±—Ä–∞–∫–µ(")
            return
        (
            user1,
            user1_name,
            user2,
            user2_name,
            witness1_name,
            witness2_name,
            marriage_date,
            marriage_msg_id,
        ) = data
        out = f"üíù{user1_name} –∏ {user2_name} –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ —Å–≤–æ–∏ —Å–µ—Ä–¥—Ü–∞ –≤ –±—Ä–∞–∫!üíù\n"
        date = str(datetime.strptime(marriage_date, "%y-%m-%d %H:%M:%S"))
        out += f"<b>–î–∞—Ç–∞:</b> {date.split()[0]}\n"
        out += f"<b>–í—Ä–µ–º—è:</b> {date.split()[1]}\n "
        out += "\n"
        out += (
            f"{witness1_name} –∏ {witness2_name} –∂–µ–ª–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –ª–µ—Ç –≤–º–µ—Å—Ç–µ, –ø–æ–ª–Ω—ã—Ö –ª—é–±–≤–∏, —Ä–∞–¥–æ—Å—Ç–∏ –∏ "
            f"–≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è!\n"
        )
        out += f'<a href="https://t.me/{message.chat.username}/{marriage_msg_id}">–ü–∞–º—è—Ç—å –æ–± —ç—Ç–æ–º –¥–Ω–µ –¥–æ —Å–∏—Ö –ø–æ—Ä —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...</a>'
        await message.reply(out)


@dp.message_handler(commands="divorce")
async def divorce(message: types.Message):
    with UsersDatabaseManager() as db_worker:
        try:
            db_worker.request_divorce(message.from_user.id, message.chat.id)
            inline_divorce_agreement = InlineKeyboardButton(
                "–î–∞", callback_data=f"divorce {message.chat.id} {message.from_user.id}"
            )
            inline_divorce_refusal = InlineKeyboardButton(
                "–û—Ç–º–µ–Ω–∞",
                callback_data=f"not_divorce {message.chat.id} {message.from_user.id}",
            )
            inline_divorce_kb = InlineKeyboardMarkup().add(
                inline_divorce_agreement, inline_divorce_refusal
            )
            await message.reply(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å?", reply_markup=inline_divorce_kb
            )
        except WrongUserException:
            await message.reply("–í—ã –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!")


@dp.callback_query_handler(lambda c: c.data[:7] == "divorce")
async def divorce_agreed(call: types.CallbackQuery):
    with UsersDatabaseManager() as db_worker:
        s, chat_id, user_id = call.data.split()
        if call.from_user.id != int(user_id):
            await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–≤–æ–¥")
            return
        db_worker.divorce(user_id, chat_id)
        await call.message.edit_text("–í—ã —Ä–∞–∑–≤–µ–ª–∏—Å—å")


@dp.callback_query_handler(lambda c: c.data[:11] == "not_divorce")
async def divorce_refused(call: types.CallbackQuery):
    s, chat_id, user_id = call.data.split()
    if int(user_id) != call.from_user.id:
        await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞–∑–≤–æ–¥!")
        return
    await call.message.edit_text("–†–∞–∑–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == "agreement")
async def marriage_agreed(call: types.CallbackQuery):
    with UsersDatabaseManager() as db_worker:
        try:
            status, user_1, user_2, witness_1, witness_2, user_1_name, user_2_name = (
                db_worker.marriage_agree(
                    call.from_user.id, call.message.chat.id, call.message.message_id
                )
            )
            if status:
                await call.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±—Ä–∞–∫!")
                await call.message.edit_reply_markup()
                await call.message.edit_text(
                    f"{user_1_name} –∏ {user_2_name} –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±—Ä–∞–∫!"
                )
            else:
                await call.answer(
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –±—Ä–∞–∫, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π"
                )
                await call.message.edit_text(
                    emoji.emojize(
                        f"–î–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞–∫–∞ —Ç–∞–∫ –∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–≤–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—è\n"
                        f"–°–æ–≥–ª–∞—Å–∏–µ: :check_mark_button:\n"
                        f'–ü–µ—Ä–≤—ã–π —Å–≤–∏–¥–µ—Ç–µ–ª—å: {":check_mark_button:" if witness_1 else ":cross_mark:"}\n'
                        f'–í—Ç–æ—Ä–æ–π —Å–≤–∏–¥–µ—Ç–µ–ª—å: {":check_mark_button:" if witness_2 else ":cross_mark:"})'
                    ),
                    reply_markup=form_inline_kb(agreement=False),
                )
        except WrongUserException:
            await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ")
        except TimeLimitException:
            await call.answer(
                emoji.emojize(
                    "–ü—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –±—Ä–∞–∫ –∑–∞–∫–ª—é—á–∏—Ç—å –Ω–µ–ª—å–∑—è! :alarm_clock:"
                )
            )
            await call.message.edit_reply_markup()
            await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == "refusal")
async def marriage_refused(call: types.CallbackQuery):
    with UsersDatabaseManager() as db_worker:
        try:
            user1_id, user1_name, user2_id, user2_name = db_worker.marriage_disagree(
                call.from_user.id, call.message.chat.id, call.message.message_id
            )
        except WrongUserException:
            await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å!")
            return
        await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ–ª–∏—Å—å")
        await call.message.edit_reply_markup()
        await call.message.edit_text(
            f'<a href="tg://user?id={user1_id}">{user1_name}</a> –æ—Ç–∫–∞–∑–∞–ª –≤ –±—Ä–∞–∫–µ <a href="tg://user?id={user2_id}">{user2_name}</a>'
        )


@dp.callback_query_handler(lambda c: c.data == "witness")
async def witness(call: types.CallbackQuery):
    with UsersDatabaseManager() as db_worker:
        try:
            data = db_worker.marriage_witness(
                call.from_user.id, call.message.chat.id, call.message.message_id
            )
            betrothed, agreed, two_witnesses, user1, user1_name, user2, user2_name = (
                data
            )
            await call.answer("–¢–µ–ø–µ—Ä—å –≤—ã —Å–≤–∏–¥–µ—Ç–µ–ª—å!")
            if not betrothed:
                await call.message.edit_text(
                    emoji.emojize(
                        f'<a href="tg://user?id={user2}">{user2_name}</a>, '
                        f'–≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å <a href="tg://user?id={user1}">{user1_name}</a>?\n'
                        f"–î–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞–∫–∞ —Ç–∞–∫ –∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–≤–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—è\n"
                        f'–°–æ–≥–ª–∞—Å–∏–µ: {":check_mark_button:" if agreed else ":cross_mark:"}\n'
                        f"–ü–µ—Ä–≤—ã–π —Å–≤–∏–¥–µ—Ç–µ–ª—å: :check_mark_button:\n"
                        f'–í—Ç–æ—Ä–æ–π —Å–≤–∏–¥–µ—Ç–µ–ª—å: {":check_mark_button:" if two_witnesses else ":cross_mark:"}'
                    ),
                    reply_markup=form_inline_kb(agreement=not agreed),
                )
            else:
                await call.message.edit_text(
                    f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤! <a href="tg://user?id={user1}">{user1_name}</a> –∏ <a href="tg://user?id={user2}">{user2_name}</a> —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!'
                )
        except WrongUserException:
            await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å —Å–≤–∏–¥–µ—Ç–µ–ª–µ–º!")
        except TimeLimitException:
            await call.answer(
                emoji.emojize(
                    "–ü—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –±—Ä–∞–∫ –∑–∞–∫–ª—é—á–∏—Ç—å –Ω–µ–ª—å–∑—è! :alarm_clock:"
                )
            )
            await call.message.edit_reply_markup()
            await call.message.delete()
